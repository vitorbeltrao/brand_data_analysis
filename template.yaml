AWSTemplateFormatVersion: '2010-09-09'

# Define the resources to be created
Resources:
  # S3 Bucket
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'

  MyDBSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: MySecretForAppNasaData
      GenerateSecretString:
        SecretStringTemplate: '{"username": "user_admin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\;+%'

  # RDS PostgreSQL Database Instance
  MyDBInstance:
    Type: 'AWS::RDS::DBInstance'
    DependsOn:
      - MyDBSecret
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: db.t3.micro # free tier
      Engine: postgres
      EngineVersion: '14.7'
      MasterUsername: '{{resolve:secretsmanager:MySecretForAppBrandData:SecretString:username}}'
      MasterUserPassword: '{{resolve:secretsmanager:MySecretForAppBrandData:SecretString:password}}' # Referencing the secret value
      DBInstanceIdentifier: brand-data-db
      StorageType: gp2
      MultiAZ: false
      DBParameterGroupName: !Ref MyDBParameterGroup
    
  MyDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Family: postgres14
      Description: My db parameter group
      Parameters:
        # Enable logical replication
        rds.logical_replication: '1'

        # Load shared libraries during database initialization
        shared_preload_libraries: 'pg_stat_statements,pglogical'

  # DMS Replication Instance
  MyDMSInstance:
    Type: 'AWS::DMS::ReplicationInstance'
    Properties:
      ReplicationInstanceClass: dms.t2.micro # free tier
      EngineVersion: 3.4.7
      MultiAZ: false

  # DMS Source Endpoint
  MyDMSSourceEndpoint:
    Type: 'AWS::DMS::Endpoint'
    Properties:
      EndpointIdentifier: my-dms-source-endpoint
      EndpointType: source
      EngineName: postgres
      DatabaseName: postgres
      ServerName: !GetAtt MyDBInstance.Endpoint.Address
      Port: !GetAtt MyDBInstance.Endpoint.Port
      Username: '{{resolve:secretsmanager:MySecretForAppBrandData:SecretString:username}}'
      Password: '{{resolve:secretsmanager:MySecretForAppBrandData:SecretString:password}}'
      ExtraConnectionAttributes: 'PluginName=PGLOGICAL;'

  # DMS Target Role
  MyDMSTargetRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: dms.amazonaws.com
            Action: 'sts:AssumeRole'  
      Policies:
        - PolicyName: 'DMSAccessToS3'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
        - PolicyName: 'DMSAccessToRDS'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

  # DMS Target Endpoint
  MyDMSTargetEndpoint:
    Type: 'AWS::DMS::Endpoint'
    Properties:
      EndpointType: target
      EngineName: s3
      S3Settings:
        BucketFolder: nasa-data
        BucketName: !Ref MyS3Bucket
        ServiceAccessRoleArn: !GetAtt MyDMSTargetRole.Arn

  # DMS Replication Task
  MyDMSTask:
    Type: 'AWS::DMS::ReplicationTask'
    Properties:
      ReplicationTaskIdentifier: my-dms-task
      MigrationType: full-load-and-cdc
      SourceEndpointArn: !Ref MyDMSSourceEndpoint
      TargetEndpointArn: !Ref MyDMSTargetEndpoint
      ReplicationInstanceArn: !Ref MyDMSInstance
      TableMappings: |
        {
          "rules": [
            {
              "rule-type": "selection",
              "rule-id": "1",
              "rule-name": "rule1",
              "object-locator": {
                "schema-name": "nasa_data_db",
                "table-name": "%"
              },
              "rule-action": "include"
            }
          ]
        }
